unit uConfigConnection;

interface

uses
  System.IniFiles, Vcl.Forms, System.SysUtils;

type
  TConnectionConfig = class
  private
    FPort: String;
    FServer: String;
    FDataBase: String;
    FPassword: String;
    FUserName: String;
    FIniFile: TIniFile;

    function GetPort: String;
    function GetServer: String;
    function GetDataBase: String;
    function GetPassword: String;
    function GetUserName: String;
    function GetDiverConnection: String;
  private
    function GetInfoINI(const pChave, pField, pValue: String): String;
    function EncryptSenha(const pSenha: String; StartKey, MultKey, AddKey :Integer): String;
    function DecryptSenha(const pSenha: String; StartKey, MultKey, AddKey: Integer): String;

    procedure SetPort(const Value: String);
    procedure SetServer(const Value: String);
    procedure SetDatabase(const Value: String);
    procedure SetPassword(const Value: String);
    procedure SetUserName(const Value: String);
  public
    procedure CreateConfigINI(const pConfig: TConnectionConfig);

    property Port: String read GetPort write SetPort;
    property Server: String read GetServer write SetServer;
    property DataBase: String read GetDataBase write SetDatabase;
    property Password: String read GetPassword write SetPassword;
    property UserName: String read GetUserName write SetUserName;
    property DriverConnection: String read GetDiverConnection;
  end;

implementation

{ TConnectionConfig }

procedure TConnectionConfig.CreateConfigINI(const pConfig: TConnectionConfig);
begin
  FIniFile := TIniFile.Create(ExtractFilePath(Application.ExeName) + 'ConfigConnection.ini');
  FIniFile.WriteString('Connection', 'DriverConnection', 'PG');
  FIniFile.WriteString('Connection', 'DataBase', pConfig.FDataBase);
  FIniFile.WriteString('Connection', 'UserName', pConfig.FUserName);
  FIniFile.WriteString('Connection', 'Password', pConfig.FPassword);
  FIniFile.WriteString('Connection', 'Server', pConfig.FServer);
  FIniFile.WriteString('Connection', 'Port', pConfig.FPort);
  FIniFile.Free;
end;

function TConnectionConfig.GetInfoINI(const pChave, pField, pValue: String): String;
begin
  FIniFile := TIniFile.Create(ExtractFilePath(Application.ExeName) + 'ConfigConnection.ini');
  Result := FIniFile.ReadString(pChave, pField, pValue);
  FIniFile.Free;
end;

function TConnectionConfig.DecryptSenha(const pSenha: String; StartKey, MultKey, AddKey: Integer): String;
var
  I : Byte;
begin
  Result := '\';
  for I := 1 to Length(pSenha) do
  begin
    Result := Result + CHAR(Byte(pSenha[I]) xor (StartKey));
    StartKey := (Byte(pSenha[I]) + StartKey) * MultKey + AddKey;
  end;
end;

function TConnectionConfig.EncryptSenha(const pSenha: String; StartKey, MultKey, AddKey: Integer): String;
var
  I : Byte;
begin
  Result := '\';
  for I := 1 to Length(pSenha) do
  begin
    Result := Result + CHAR(Byte(pSenha[I]) xor (StartKey));
    StartKey := (Byte(Result[I]) + StartKey) * MultKey + AddKey;
  end;
end;

function TConnectionConfig.GetDataBase: String;
begin
  Result := getInfoINI('Connection', 'DataBase', 'wbMarket');
end;

function TConnectionConfig.GetDiverConnection: String;
begin
  Result := getInfoINI('Connection', 'DriverConnection', 'PG');
end;

function TConnectionConfig.GetPassword: String;
begin
  Result := DecryptSenha(getInfoINI('Connection', 'Password', ''), 93, 86, 17);
end;

function TConnectionConfig.GetPort: String;
begin
  Result := getInfoINI('Connection', 'Port', '5432');
end;

function TConnectionConfig.GetServer: String;
begin
  Result := getInfoINI('Connection', 'Server', 'localhost');
end;

function TConnectionConfig.GetUserName: String;
begin
  Result := getInfoINI('Connection', 'UserName', 'postgres');
end;

procedure TConnectionConfig.SetDatabase(const Value: String);
begin
  FDataBase := Value;
end;

procedure TConnectionConfig.SetPassword(const Value: String);
begin
  FPassword := EncryptSenha(Value, 93, 86, 17);
end;

procedure TConnectionConfig.SetPort(const Value: String);
begin
  FPort := Value;
end;

procedure TConnectionConfig.SetServer(const Value: String);
begin
  FServer := Value
end;

procedure TConnectionConfig.SetUserName(const Value: String);
begin
  FUserName := Value;
end;

end.
